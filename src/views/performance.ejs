<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Técnicos y Equipos</title>
    <%- include('partials/head') %>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <%- include('partials/navigation') %>
    <div class="container">
        <h1>Técnicos y Equipos</h1>

        <!-- Formulario de Filtro por Rango de Tiempo -->
        <form id="filterForm" class="mb-3">
            <div class="row">
                <div class="col-md-3">
                    <input type="date" id="startDate" class="form-control" placeholder="Fecha Inicio">
                </div>
                <div class="col-md-3">
                    <input type="date" id="endDate" class="form-control" placeholder="Fecha Fin">
                </div>
                <div class="col-md-3">
                    <button type="button" class="btn btn-primary" onclick="applyFilter()">Aplicar Filtro</button>
                </div>
            </div>
        </form>

        <!-- Gráfico de Técnicos -->
        <h2>Técnicos</h2>
        <canvas id="performanceChart"></canvas>

        <!-- Tabla de Técnicos -->
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Técnico</th>
                    <th>Número de Avisos</th>
                    <th>Tiempo Total (minutos)</th>
                </tr>
            </thead>
            <tbody id="performanceTableBody"></tbody>
        </table>

        <!-- Gráfico de Equipos -->
        <h2>Rendimiento de Equipos</h2>
        <canvas id="equipmentChart"></canvas>

        <!-- Tabla de Equipos -->
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Equipo</th>
                    <th>Número de Avisos</th>
                    <th>Tiempo Total (minutos)</th>
                </tr>
            </thead>
            <tbody id="equipmentTableBody"></tbody>
        </table>

        <!-- Tabla de Equipos -->
        <h2>Avisos por Máquina y Clase</h2>
        <canvas id="equipmentClassChart"></canvas>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Equipo</th>
                    <th>Clase</th>
                    <th>Número de Avisos</th>
                    <th>Tiempo Total (minutos)</th>
                </tr>
            </thead>
            <tbody id="equipmentClassTableBody"></tbody>
        </table>

        <h1>Reportes de Rendimiento de Equipos</h1>
        <!-- Base de Tiempo de Operación -->
        <h2>Base de Tiempo Total de Operación</h2>
        <p id="totalOperationTime"></p>

        <!-- MTBF -->
        <h2>MTBF</h2>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Equipo</th>
                    <th>MTBF (minutos)</th>
                </tr>
            </thead>
            <tbody id="mtbfTableBody"></tbody>
        </table>

        <!-- MTTR -->
        <h2>MTTR</h2>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Equipo</th>
                    <th>MTTR (minutos)</th>
                </tr>
            </thead>
            <tbody id="mttrTableBody"></tbody>
        </table>

        <!-- Disponibilidad -->
        <h2>Disponibilidad</h2>
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Equipo</th>
                    <th>Disponibilidad</th>
                </tr>
            </thead>
            <tbody id="availabilityTableBody"></tbody>
        </table>
    </div>
    <%- include('partials/footer') %>
    <%- include('partials/scripts') %>
    <script>
        let performanceChartInstance = null;
        let equipmentChartInstance = null;
        let equipmentClassChartInstance = null;

        document.addEventListener('DOMContentLoaded', async () => {

            setDefaultDates();
            const startDateInput = document.getElementById('startDate').value;
            const endDateInput = document.getElementById('endDate').value;
            const startDate = new Date(startDateInput);
            startDate.setUTCHours(5, 0, 0, 0);
            const endDate = new Date(endDateInput);
            endDate.setUTCHours(28, 59, 59, 999); 
            const totalOperationTime = calculateTotalOperationTime();
            await loadPerformanceData(startDate.toISOString(), endDate.toISOString());
            await loadEquipmentData(startDate.toISOString(), endDate.toISOString());
            await loadEquipmentClassData(startDate.toISOString(), endDate.toISOString());
            await loadMTBFData(startDate.toISOString(), endDate.toISOString(), totalOperationTime);
            await loadMTTRData(startDate.toISOString(), endDate.toISOString(), totalOperationTime);
            await loadAvailabilityData(startDate.toISOString(), endDate.toISOString(), totalOperationTime);
            document.getElementById('totalOperationTime').innerText = `Tiempo Total de Operación (minutos): ${totalOperationTime}`;
        });

        function setDefaultDates() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            const now = new Date();
            const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
            const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);

            startDateInput.value = startOfMonth.toISOString().slice(0, 10)
            endDateInput.value = endOfMonth.toISOString().slice(0, 10)

            //loadPerformanceData(startOfMonth.toISOString(), endOfMonth.toISOString())
        }

        function calculateTotalOperationTime() {
            const now = new Date();
            const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
            let totalOperationMinutes = 0;

            for (let date = startOfMonth; date <= now; date.setDate(date.getDate() + 1)) {
                const dayOfWeek = date.getDay();

                if (dayOfWeek >= 1 && dayOfWeek <= 5) {
                    // Lunes a Viernes: 2 turnos de 8 horas cada uno
                    totalOperationMinutes += 2 * 8 * 60;
                } else if (dayOfWeek === 6) {
                    // Sábado: 2 turnos de 6 horas cada uno
                    totalOperationMinutes += 2 * 6 * 60;
                }
                // Domingo: no se trabaja
            }

            return totalOperationMinutes;
        }


        async function loadPerformanceData(startDate, endDate) {
            const url = startDate && endDate ? `/performance/filtered?startDate=${startDate}&endDate=${endDate}` : '/performance/data';
            console.log('Url' + url);
            
            console.log('loadPer' + startDate, endDate);
            
            const response = await fetch(url);
            const data = await response.json();
            //console.log(data);
            

            const labels = data.map(item => item.technician);
            const numNotices = data.map(item => item.numNotices);
            const totalTime = data.map(item => item.totalTime);

            const ctx = document.getElementById('performanceChart').getContext('2d');

            //console.log(url);
            

            if (performanceChartInstance) {
                performanceChartInstance.destroy();
            }

            performanceChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Número de Avisos',
                            data: numNotices,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Tiempo Total (minutos)',
                            data: totalTime,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const tableBody = document.getElementById('performanceTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.technician}</td>
                    <td>${item.numNotices}</td>
                    <td>${item.totalTime}</td>
                </tr>
            `).join('');
        }

        async function loadEquipmentData(startDate, endDate) {
            const url = startDate && endDate ? `/equipment/filtered?startDate=${startDate}&endDate=${endDate}` : '/equipment/data';
            const response = await fetch(url);
            const data = await response.json();

            const labels = data.map(item => item.equipment);
            const classes = data.map(item => item.class);
            const numNotices = data.map(item => item.numNotices);
            const totalTime = data.map(item => item.totalTime);

            const ctx = document.getElementById('equipmentChart').getContext('2d');

            if (equipmentChartInstance) {
                equipmentChartInstance.destroy();
            }

            equipmentChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Número de Avisos',
                            data: numNotices,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Tiempo Total (minutos)',
                            data: totalTime,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const tableBody = document.getElementById('equipmentTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.equipment}</td>
                    <td>${item.numNotices}</td>
                    <td>${item.totalTime}</td>
                </tr>
            `).join('');
        }

        async function loadEquipmentClassData(startDate, endDate) {
            const url = startDate && endDate ? `/equipmentClass/filtered?startDate=${startDate}&endDate=${endDate}` : '/equipmentClass/data';
            const response = await fetch(url);
            const data = await response.json();

            const labels = [...new Set(data.map(item => item.equipment))];
            const classes = ['PM01', 'PM02', 'PM03'];

            const noticeDataset = classes.map(cls => ({
                label: `Número de Avisos (${cls})`,
                data: labels.map(equipment => {
                    const filteredData = data.filter(item => item.equipment === equipment && item.class === cls);
                    return filteredData.reduce((sum, item) => sum + item.numNotices, 0);
                }),
                backgroundColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.2)`,
                borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,
                borderWidth: 1
            }));

            const timeDataset = classes.map(cls => ({
                label: `Tiempo Total (${cls})`,
                data: labels.map(equipment => {
                    const filteredData = data.filter(item => item.equipment === equipment && item.class === cls);
                    return filteredData.reduce((sum, item) => sum + item.totalTime, 0);
                }),
                backgroundColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.2)`,
                borderColor: `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`,
                borderWidth: 1
            }));

            const ctx = document.getElementById('equipmentClassChart').getContext('2d');

            if (equipmentClassChartInstance) {
                equipmentClassChartInstance.destroy();
            }

            equipmentClassChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [...noticeDataset, ...timeDataset]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });


            const tableBody = document.getElementById('equipmentClassTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.equipment}</td>
                    <td>${item.class}</td>
                    <td>${item.numNotices}</td>
                    <td>${item.totalTime}</td>
                </tr>
            `).join('');
        }


        async function loadMTBFData(startDate, endDate, totalOperationTime) {
            const response = await fetch(`/performance/mtbf?startDate=${startDate}&endDate=${endDate}`);
            const data = await response.json();
            const tableBody = document.getElementById('mtbfTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.equipment}</td>
                    <td>${item.mtbf}</td>
                </tr>
            `).join('');
        }

        async function loadMTTRData(startDate, endDate, totalOperationTime) {
            const response = await fetch(`/performance/mttr?startDate=${startDate}&endDate=${endDate}`);
            const data = await response.json();
            const tableBody = document.getElementById('mttrTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.equipment}</td>
                    <td>${item.mttr}</td>
                </tr>
            `).join('');
        }

        async function loadAvailabilityData(startDate, endDate, totalOperationTime) {
            const response = await fetch(`/performance/availability?startDate=${startDate}&endDate=${endDate}`);
            const data = await response.json();
            const tableBody = document.getElementById('availabilityTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.equipment}</td>
                    <td>${item.availability}</td>
                </tr>
            `).join('');
        }

        /* function applyFilter() {
            const startDate = new Date(document.getElementById('startDate').value).toISOString(); 
            const endDate = new Date(document.getElementById('endDate').value).toISOString();
            loadPerformanceData(startDate, endDate);
            loadEquipmentData(startDate, endDate);
        } */

        function applyFilter() {
            console.log('aplicando filtro');
            const startDateInput = document.getElementById('startDate').value;
            const endDateInput = document.getElementById('endDate').value;

            // Convertir la fecha de inicio a las 00:00:00.000 de ese día en UTC
            const startDate = new Date(startDateInput);
            startDate.setUTCHours(5, 0, 0, 0); // UTC-05:00 compensado a UTC

            // Convertir la fecha de final a las 23:59:59.999 de ese día en UTC
            const endDate = new Date(endDateInput);
            endDate.setUTCHours(28, 59, 59, 999); // UTC-05:00 compensado a UTC

            loadPerformanceData(startDate.toISOString(), endDate.toISOString());
            loadEquipmentData(startDate.toISOString(), endDate.toISOString());
            loadEquipmentClassData(startDate.toISOString(), endDate.toISOString());
        }

        /* function applyFilter() { 
            const startDateInput = document.getElementById('startDate').value; 
            const endDateInput = document.getElementById('endDate').value; 
            const startDate = new Date(startDateInput) 
            const endDate = new Date(endDateInput); 
            startDate.setHours(0,0,0,0)
            endDate.setHours(23, 59, 59, 999);
            loadPerformanceData(startDate, endDate.toISOString()); 
            loadEquipmentData(startDate, endDate.toISOString()); 
        } */

    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rendimiento de Técnicos y Equipos</title>
    <%- include('partials/head') %>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <%- include('partials/navigation') %>
    <div class="container">
        <h1>Rendimiento de Técnicos y Equipos</h1>

        <!-- Formulario de Filtro por Rango de Tiempo -->
        <form id="filterForm" class="mb-3">
            <div class="row">
                <div class="col-md-3">
                    <input type="date" id="startDate" class="form-control" placeholder="Fecha Inicio">
                </div>
                <div class="col-md-3">
                    <input type="date" id="endDate" class="form-control" placeholder="Fecha Fin">
                </div>
                <div class="col-md-3">
                    <button type="button" class="btn btn-primary" onclick="applyFilter()">Aplicar Filtro</button>
                </div>
            </div>
        </form>

        <!-- Gráfico de Técnicos -->
        <h2>Rendimiento de Técnicos</h2>
        <canvas id="performanceChart"></canvas>

        <!-- Tabla de Técnicos -->
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Técnico</th>
                    <th>Ubicación</th>
                    <th>Número de Avisos</th>
                    <th>Tiempo Total (minutos)</th>
                </tr>
            </thead>
            <tbody id="performanceTableBody"></tbody>
        </table>

        <!-- Gráfico de Equipos -->
        <h2>Rendimiento de Equipos</h2>
        <canvas id="equipmentChart"></canvas>

        <!-- Tabla de Equipos -->
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>Equipo</th>
                    <th>Clase</th>
                    <th>Ubicación</th>
                    <th>Número de Avisos</th>
                    <th>Tiempo Total (minutos)</th>
                </tr>
            </thead>
            <tbody id="equipmentTableBody"></tbody>
        </table>
    </div>
    <%- include('partials/footer') %>
    <%- include('partials/scripts') %>
    <script>
        let performanceChartInstance = null;
        let equipmentChartInstance = null;

        document.addEventListener('DOMContentLoaded', async () => {
            await loadPerformanceData();
            await loadEquipmentData();
        });

        async function loadPerformanceData(startDate, endDate) {
            const url = startDate && endDate ? `/performance/filtered?startDate=${startDate}&endDate=${endDate}` : '/performance/data';
            const response = await fetch(url);
            const data = await response.json();
            console.log(data);
            

            const labels = data.map(item => `${item.technician} (${item.location})`);
            const numNotices = data.map(item => item.numNotices);
            const totalTime = data.map(item => item.totalTime);

            const ctx = document.getElementById('performanceChart').getContext('2d');

            console.log(url);
            

            if (performanceChartInstance) {
                performanceChartInstance.destroy();
            }

            performanceChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Número de Avisos',
                            data: numNotices,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Tiempo Total (minutos)',
                            data: totalTime,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const tableBody = document.getElementById('performanceTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.technician}</td>
                    <td>${item.location}</td>
                    <td>${item.numNotices}</td>
                    <td>${item.totalTime}</td>
                </tr>
            `).join('');
        }

        async function loadEquipmentData(startDate, endDate) {
            const url = startDate && endDate ? `/equipment/filtered?startDate=${startDate}&endDate=${endDate}` : '/equipment/data';
            const response = await fetch(url);
            const data = await response.json();

            const labels = data.map(item => `${item.equipment} (${item.location})`);
            const classes = data.map(item => item.class);
            const numNotices = data.map(item => item.numNotices);
            const totalTime = data.map(item => item.totalTime);

            const ctx = document.getElementById('equipmentChart').getContext('2d');

            if (equipmentChartInstance) {
                equipmentChartInstance.destroy();
            }

            equipmentChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Número de Avisos',
                            data: numNotices,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Tiempo Total (minutos)',
                            data: totalTime,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const tableBody = document.getElementById('equipmentTableBody');
            tableBody.innerHTML = data.map(item => `
                <tr>
                    <td>${item.equipment}</td>
                    <td>${item.class}</td>
                    <td>${item.location}</td>
                    <td>${item.numNotices}</td>
                    <td>${item.totalTime}</td>
                </tr>
            `).join('');
        }


        /* function applyFilter() {
            const startDate = new Date(document.getElementById('startDate').value).toISOString(); 
            const endDate = new Date(document.getElementById('endDate').value).toISOString();
            loadPerformanceData(startDate, endDate);
            loadEquipmentData(startDate, endDate);
        } */

        function applyFilter() {
            const startDateInput = document.getElementById('startDate').value;
            const endDateInput = document.getElementById('endDate').value;

            // Convertir la fecha de inicio a las 00:00:00.000 de ese día en UTC
            const startDate = new Date(startDateInput);
            startDate.setUTCHours(5, 0, 0, 0); // UTC-05:00 compensado a UTC

            // Convertir la fecha de final a las 23:59:59.999 de ese día en UTC
            const endDate = new Date(endDateInput);
            endDate.setUTCHours(28, 59, 59, 999); // UTC-05:00 compensado a UTC

            loadPerformanceData(startDate.toISOString(), endDate.toISOString());
            loadEquipmentData(startDate.toISOString(), endDate.toISOString());
        }

        /* function applyFilter() { 
            const startDateInput = document.getElementById('startDate').value; 
            const endDateInput = document.getElementById('endDate').value; 
            const startDate = new Date(startDateInput) 
            const endDate = new Date(endDateInput); 
            startDate.setHours(0,0,0,0)
            endDate.setHours(23, 59, 59, 999);
            loadPerformanceData(startDate, endDate.toISOString()); 
            loadEquipmentData(startDate, endDate.toISOString()); 
        } */

    </script>
</body>
</html>